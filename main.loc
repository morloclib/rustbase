module rustbase

type Rust Real = "f64"
type Rust Int = "i64"
type Rust Str = "String"
type Rust Bool = "bool"

export Map

export Real
export Int
export Str
export Bool

export id

export add
export sub
export mul
export div
export mod

export fst
export snd
export tupl
export couple
export withSec
export withFst

export unzip

export zipWith
export fold
export map

export head
export tail

source Rust from "."
  ( "morloc_id" as id

  -- arithmetic
  , "morloc_add" as add
  , "morloc_sub" as sub
  , "morloc_mul" as mul
  , "morloc_div" as div
  , "morloc_mod" as mod

  -- tuples
  , "morloc_fst" as fst
  , "morloc_snd" as snd
  , "morloc_tuple" as tuple
  , "morloc_couple" as couple
  , "with_snd" as withSnd
  , "with_fst" as withFst

  -- map functions
  , "morloc_unzip" as unzip
  , "morloc_filter_key" as filterKey
  , "morloc_filter_val" as filterVal

  -- higher order functions
  , "morloc_zip_with" as zipWith
  , "morloc_fold" as fold
  , "morloc_map" as map
  , "morloc_filter" as filter

  -- lists
  , "morloc_head" as head
  , "morloc_tail" as tail
  , "morloc_last" as last
  , "morloc_init" as init
  , "morloc_take" as take
  , "morloc_drop" as drop
  , "morloc_take_while" as takeWhile
  , "morloc_drop_while" as dropWhile

  -- Map (un)packers for pre-(de)serialization
  , "morloc_pack_map" as packMap
  , "morloc_unpack_map" as unpackMap
  )

type Rust (Map key val) = "std::collections::HashMap<$1, $2>" key val

packMap     :: pack => ([key], [val]) -> Map key val
packMap Rust :: pack => ([key], [val]) -> "std::collections::HashMap<$1, $2>" key val

unpackMap     :: unpack => Map key val -> ([key], [val])
unpackMap Rust :: unpack => "std::collections::HashMap<$1, $2>" key val -> ([key], [val])

id     :: a -> a
id Rust :: a -> a


-- arithmetic
-- add  :: (Real a) => a -> a -> a
add     :: Real -> Real -> Real
add Rust :: "f64" -> "f64" -> "f64"

-- sub  :: (Real a) => a -> a -> a
sub     :: Real -> Real -> Real
sub Rust :: "f64" -> "f64" -> "f64"

-- mul  :: (Real a) => a -> a -> a
mul     :: Real -> Real -> Real
mul Rust :: "f64" -> "f64" -> "f64"

-- div  :: (Real a) => a -> a -> a
div     :: Real -> Real -> Real
div Rust :: "f64" -> "f64" -> "f64"

mod     :: Int -> Int -> Int
mod Rust :: "i64" -> "i64" -> "i64"


-- tuple functions
fst     :: (a, b) -> a
fst Rust :: "&($1, $2)" a b -> "&$1" a

snd     :: (a, b) -> b
snd Rust :: "&($1, $2)" a b -> "&$1" b

tuple     :: a -> b -> (a, b)
tuple Rust :: a -> b -> "($1, $2)" a b

couple     :: (a -> b) -> a -> (b, a)
couple Rust :: (a -> b) -> a -> "($1, $2)" b a

withSnd     :: (b -> c) -> (a, b) -> (a, c)
withSnd Rust :: (b -> c) -> "&($1, $2)" a b
                          -> "($1, $2)" a c

withFst     :: (a -> c) -> (a, b) -> (c, b)
withFst Rust :: (a -> c) -> "&($1, $2)" a b
                          -> "($1, $2)" c b

-- map functions
-- zip :: [a] -> [b] -> [(a, b)]
-- zip xs ys = zipWith tuple xs ys

unzip     :: [(a, b)] -> ([a], [b])
unzip Rust :: "&[($1, $2)]" a b -> "(Vec<$1>, Vec<$2>)" a b

-- keys :: [(a, b)] -> [a]
-- keys xs = map fst xs

-- vals :: [(a, b)] -> [b]
-- vals xs = map snd xs

filterKey     :: (a -> Bool) -> [(a, b)] -> [(a, b)]
filterKey Rust :: (a -> "bool") -> "&[($1, $2)]" a b -> "Vec<($1, $2)>" a b


filterVal     :: (a -> Bool) -> [(a, b)] -> [(a, b)]
filterVal Rust :: (b -> "bool") -> "&[($1, $2)]" a b -> "Vec<($1, $2)>" a b

-- higher order functions
zipWith     :: (a -> b -> c) -> [a] -> [b] -> [c]
zipWith Rust :: (a -> b -> c) -> "&[$1]" a
                               -> "&[$1]" b
                               -> "Vec<$1>" c

fold     :: (b -> a -> b) -> b -> [a] -> b
fold Rust :: (b -> a -> b) -> b -> "Vec<$1>" a -> b

map     :: (a -> b) -> [a] -> [b]
map Rust :: (a -> b) -> "&[$1]" a -> "Vec<$1>" b

filter     :: (a -> Bool) -> [a] -> [a]
filter Rust :: (a -> "bool") -> "&[$1]" a -> "Vec<$1>" a


-- lists
head     :: [a] -> a
head Rust :: "&[$1]" a -> a

tail     :: [a] -> [a]
tail Rust :: "&[$1]" a -> "&[$1]" a

last     :: [a] -> a
last Rust :: "&[$1]" a -> a

init     :: [a] -> a
init Rust :: "&[$1]" a -> "&[$1]" a

take     :: [a] -> [a]
take Rust :: "&[$1]" a -> "Vec<$1>" a

drop     :: [a] -> [a]
drop Rust :: "&[$1]" a -> "Vec<$1>" a

takeWhile     :: (a -> Bool) -> [a] -> [a]
takeWhile Rust :: (a -> "bool") -> "&[$1]" a -> "Vec<$1>" a

dropWhile     :: (a -> Bool) -> [a] -> [a]
dropWhile Rust :: (a -> "bool") -> "&[$1]" a -> "Vec<$1>" a
