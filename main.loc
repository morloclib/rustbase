module rustbase {

type Cpp Num = "f64";
type Cpp Int = "i64";
type Cpp Str = "String";
type Cpp Bool = "bool";

export Num
export Int
export Str
export Bool

export id

export add
export sub
export mul
export div
export mod

export fst
export snd
export tupl
export couple
export with_sec
export with_fst

export zipWith
export fold

export head
export tail

source Cpp from "src/lib.rs" (
      "morloc_id" as id

    -- arithmetic
    , "morloc_add" as add
    , "morloc_sub" as sub
    , "morloc_mul" as mul
    , "morloc_div" as div
    , "morloc_mod" as mod

    -- tuples
    , "morloc_fst" as fst
    , "morloc_snd" as snd
    , "morloc_tuple" as tuple
    , "morloc_couple" as couple
    , "with_sec" as with_sec
    , "with_fst" as with_fst

    -- higher order functions
    , "morloc_zip_with" as zipWith
    , "morloc_fold" as fold

    -- lists
    , "morloc_head" as head
    , "morloc_tail" as tail
)

id :: a -> a;
id Cpp :: a -> a;


-- arithmetic
-- add :: (Num a) => a -> a -> a
add     :: Num -> Num -> Num;
add Cpp :: "f64" -> "f64" -> "f64";

-- sub :: (Num a) => a -> a -> a
sub    :: Num -> Num -> Num;
sub Cpp :: "f64" -> "f64" -> "f64";

-- mul :: (Num a) => a -> a -> a
mul     :: Num -> Num -> Num;
mul Cpp :: "f64" -> "f64" -> "f64";

-- div :: (Num a) => a -> a -> a
div     :: Num -> Num -> Num;
div Cpp :: "f64" -> "f64" -> "f64";

mod     :: Int -> Int -> Int;
mod Cpp :: "i64" -> "i64" -> "i64";


-- tuple functions
fst     :: (a, b) -> a;
fst Cpp :: (a, b) -> a;

snd     :: (a, b) -> b;
snd Cpp :: (a, b) -> b;

tuple     :: a -> b -> (a, b);
tuple Cpp :: a -> b -> (a, b);

couple     :: (a -> b) -> a -> (b, a);
couple Cpp :: (a -> b) -> a -> (b, a);

with_sec     :: (b -> c) -> (a, b) -> (a, c);
with_sec Cpp :: (b -> c) -> (a, b) -> (a, c);

with_fst     :: (a -> c) -> (a, b) -> (c, b);
with_fst Cpp :: (a -> c) -> (a, b) -> (c, b);


-- higher order functions
zipWith     :: (a -> b -> c) -> [a] -> [b] -> [c];
zipWith Cpp :: (a -> b -> c) -> "Vec<$1>" a
                             -> "Vec<$1>" b
                             -> "Vec<$1>" c;

fold     :: (b -> a -> b) -> b -> [a] -> b;
fold Cpp :: (b -> a -> b) -> b -> "Vec<$1>" a -> b;


-- lists
head :: [a] -> a;
head Cpp :: "&[$1]" a -> a;

tail :: [a] -> [a];
tail Cpp :: "&[$1]" a -> "&[$1]" a;

}
